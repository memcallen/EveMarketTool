/*
 * The MIT License
 *
 * Copyright 2018 memcallen
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package evemarginfinder;

import java.awt.Color;
import java.io.PrintStream;
import java.time.Instant;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Memcallen Kahoudi/Recursive Pineapple
 */
public class ConsoleFrame extends javax.swing.JFrame {

    private static final Queue<String> QUEUED_LOGS = new ArrayDeque<>();

    private static final char NORMAL_H = 0;
    private static final char ERROR_H = 1;

    public static void log(String s) {
        QUEUED_LOGS.add(NORMAL_H + s + "\n");
    }

    public static void log_error(String s) {
        QUEUED_LOGS.add(ERROR_H + s + "\n");
    }

    /**
     * Creates new form ConsoleFrame
     */
    public ConsoleFrame() {
        initComponents();
    }

    public void init(PrintStream file) {

        StyledDocument sd = console.getStyledDocument();

        Style stdout = console.addStyle("stdout", null);
        Style stderr = console.addStyle("stderr", null);

        StyleConstants.setForeground(stdout, Color.black);
        StyleConstants.setForeground(stderr, Color.red);

        StyleConstants.setItalic(stderr, true);
        
        Thread logger = new Thread(() -> {

            while (true) {

                if (!QUEUED_LOGS.isEmpty()) {
                    try {
                        String log = QUEUED_LOGS.poll();
                        Style style = null;
                        
                        switch (log.charAt(0)) {
                            case NORMAL_H:
                                style = stdout;
                                break;
                            case ERROR_H:
                                style = stderr;
                                break;
                            default:
                                break;
                        }

                        sd.insertString(sd.getLength(), log.substring(1), style);
                        file.println(Instant.now().toString() + ":" + log.substring(1));
                        System.out.print(log.substring(1));

                        if (this.isVisible()) {
                            console.setCaretPosition(sd.getLength());
                        }

                    } catch (BadLocationException ex) {
                        Logger.getLogger(ConsoleFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                try {
                    Thread.sleep(20);
                } catch (InterruptedException ex) {
                }

            }

        });

        logger.setName("Logger-Thread");

        logger.setDaemon(true);

        logger.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Console");
        setAutoRequestFocus(false);
        setLocationByPlatform(true);

        console.setEditable(false);
        jScrollPane1.setViewportView(console);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane console;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
